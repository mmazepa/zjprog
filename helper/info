ZAAWANSOWANE JĘZYKI PROGRAMOWANIA
(rok akademicki 2018/2019, semestr zimowy)

LAB1 [02.10.2018]
----------------------------------------------
GitHub: https://github.com/zjprog/2018
	=> rzucić okiem pobieżnie

Labs:   https://exercism.io/
	=> zarejestrować się!!!
	=> spróbować zacząć

Cloc/Sloc, Flog, Flay...
	=> zintegrować z czymś
	=> pobawić się
----------------------------------------------

LAB2 [09.10.2018]
----------------------------------------------
Git/GitHub
Edytor:		Atom, VSC, Emacs, Vim
		(podłączyć linter<nie>
		wtyczkę pilnującą stylu,
		np. rubocop, ...)
Bash

repo do laboratorium	README.adoc
			(asciidoctor)
			(tabelki)
----------------------------------------------

@@@@		@@@@			@@@@
https://github.com/mre/awesome-static-analysis
@@@@		@@@@			@@@@

		Java
----------------------------------------------
Bash, Atom...
cloc, flog, flay, rubocop...
wtyczki...

* checkstyle	- checking Java source code
		for adherence to a Code
		Standard or set of validation
		rules (best practices)

WAŻNE!!!
	* coś do wyszukiwania duplikacji,
	podobieństw w kodzie źródłowym
	* coś a'la flog; clean code...
	* detektor code smell...
	* coś w stylu RuboCop'a na Javę
	* jakość, quality, critic...

ZROBIĆ REPO NA GITHUBIE, ZROBIĆ README.adoc,
PRZYGOTOWAĆ ZARYS ŚRODOWISKA PRACY !!!
----------------------------------------------

LAB3 [16.10.2018]
----------------------------------------------
ABC Complexity
flog

---------|-----------------|---------|------->
       2000              2010      2018

Zrobić:   obrazek z plikiem i wynikiem...
          brudny kod i ABC Complexity
          coś jak tu:
          http://ruby.sadi.st/Flog.html
          lub na repo zjprog/2018 (GitHub)
          ważne, by uwzględnić punktację
          danej metryki (ABC) suma i podział
          [wprowadzić do README.adoc]
          [albo innego, np. WTFCode.adoc]

Pamiętać: uzupełnić zbiór narzędzi potrzebnych
          do pracy podczas laboratoriów (!!!)
----------------------------------------------

LAB4 [23.10.2018]
----------------------------------------------

   (1)           (2)           (3)
---------|-----------------|---------|------->
       2000              2010      2018

github.com/zjprog/2018:
(1) 1-4
(2) 5-7
(3) 8-12

Zasady i wzorce:
* SOLID
* DRY (Don't Repeat Yourself)
* LoD (the Law of Demeter)

Forma zaliczenia:
-> analog. "obrazek z plikiem i wynikiem..."

"Dzisiaj pracujecie, a za tydzień sobie takie
rzeczy pooglądamy" - bardzo ważna informacja!
----------------------------------------------

LAB5 [30.10.2018]
----------------------------------------------
* Visual Studio Code
* Cobalt2
* Ligatury
----------------------------------------------
POPRAWIĆ PREZENTACJĘ WTF_CODE !!!
Wszystko ma być widać na jednym ekranie:
=> kod źródłowy
=> efekt przepuszczenia przez narzędzie
=> każda linijka opisana (punktowo)
=> podział linijki na poszczególne punkty
UWAGA:
Kod powinien być konkretny, niezbyt długi
i uzyskiwać wysoką notę w narzędziu.
----------------------------------------------
